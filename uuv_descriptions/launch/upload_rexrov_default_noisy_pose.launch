import os
from launch import LaunchDescription
from launch_ros.actions import Node
from launch.actions import DeclareLaunchArgument, IncludeLaunchDescription
from launch.substitutions import LaunchConfiguration
from launch.launch_description_sources import PythonLaunchDescriptionSource
from ament_index_python.packages import get_package_share_directory

def generate_launch_description():
    return LaunchDescription([
        DeclareLaunchArgument('debug', default_value='0', description='Enable debugging'),
        DeclareLaunchArgument('x', default_value='0', description='X position'),
        DeclareLaunchArgument('y', default_value='0', description='Y position'),
        DeclareLaunchArgument('z', default_value='-20', description='Z position'),
        DeclareLaunchArgument('roll', default_value='0.0', description='Roll angle'),
        DeclareLaunchArgument('pitch', default_value='0.0', description='Pitch angle'),
        DeclareLaunchArgument('yaw', default_value='0.0', description='Yaw angle'),
        DeclareLaunchArgument('mode', default_value='default', description='Robot mode'),
        DeclareLaunchArgument('namespace', default_value='rexrov', description='Namespace for the robot'),
        DeclareLaunchArgument('pose_noise', default_value='0.02', description='Pose noise amplitude'),
        DeclareLaunchArgument('world_frame', default_value='world', description='World reference frame'),

        Node(
            package='xacro',
            executable='xacro',
            name='robot_description',
            parameters=[{
                'robot_description': LaunchConfiguration('robot_description')
            }],
            arguments=[
                os.path.join(get_package_share_directory('uuv_descriptions'),
                             'robots', 'rexrov_default_noisy_pose.xacro'),
                '--inorder',
                f'debug:={LaunchConfiguration("debug")}',
                f'namespace:={LaunchConfiguration("namespace")}',
                f'noise_amp:={LaunchConfiguration("pose_noise")}',
                f'inertial_reference_frame:={LaunchConfiguration("world_frame")}'
            ]
        ),

        Node(
            package='uuv_descriptions',
            executable='spawn_model',
            name='urdf_spawner',
            output='screen',
            arguments=[
                '-urdf', '-x', LaunchConfiguration('x'), '-y', LaunchConfiguration('y'),
                '-z', LaunchConfiguration('z'), '-R', LaunchConfiguration('roll'),
                '-P', LaunchConfiguration('pitch'), '-Y', LaunchConfiguration('yaw'),
                '-model', LaunchConfiguration('namespace'),
                '-param', [LaunchConfiguration("namespace"), "/robot_description"]
            ]
        ),

        Node(
            package='robot_state_publisher',
            executable='robot_state_publisher',
            name='robot_state_publisher',
            output='screen',
            parameters=[{
                'robot_description': [LaunchConfiguration("namespace"), "/robot_description"],
                'publish_frequency': 5.0
            }]
        ),

        IncludeLaunchDescription(
            PythonLaunchDescriptionSource(
                os.path.join(get_package_share_directory('uuv_assistants'), 'launch', 'publish_body_sname.launch.py')
            ),
            launch_arguments={
                'uuv_name': LaunchConfiguration('namespace')
            }.items()
        ),

        IncludeLaunchDescription(
            PythonLaunchDescriptionSource(
                os.path.join(get_package_share_directory('uuv_assistants'), 'launch', 'message_to_tf.launch.py')
            ),
            launch_arguments={
                'namespace': LaunchConfiguration('namespace'),
                'world_frame': LaunchConfiguration('world_frame')
            }.items()
        )
    ])
